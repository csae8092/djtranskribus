# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse, reverse_lazy
from django.views.generic.detail import DetailView
from django.views.generic.edit import DeleteView
from . filters import *
from . forms import *
from . tables import *
from . models import (
    TrpCollection,
    TrpDocument,
    TrpPage,
    TrpTranscript
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)


class TrpCollectionListView(GenericListView):

    model = TrpCollection
    filter_class = TrpCollectionListFilter
    formhelper_class = TrpCollectionFilterFormHelper
    table_class = TrpCollectionTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = True


class TrpCollectionDetailView(BaseDetailView):

    model = TrpCollection
    template_name = 'browsing/generic_detail.html'


class TrpCollectionCreate(BaseCreateView):

    model = TrpCollection
    form_class = TrpCollectionForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpCollectionCreate, self).dispatch(*args, **kwargs)


class TrpCollectionUpdate(BaseUpdateView):

    model = TrpCollection
    form_class = TrpCollectionForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpCollectionUpdate, self).dispatch(*args, **kwargs)


class TrpCollectionDelete(DeleteView):
    model = TrpCollection
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:trpcollection_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpCollectionDelete, self).dispatch(*args, **kwargs)


class TrpDocumentListView(GenericListView):

    model = TrpDocument
    filter_class = TrpDocumentListFilter
    formhelper_class = TrpDocumentFilterFormHelper
    table_class = TrpDocumentTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = True


class TrpDocumentDetailView(BaseDetailView):

    model = TrpDocument
    template_name = 'browsing/generic_detail.html'


class TrpDocumentCreate(BaseCreateView):

    model = TrpDocument
    form_class = TrpDocumentForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpDocumentCreate, self).dispatch(*args, **kwargs)


class TrpDocumentUpdate(BaseUpdateView):

    model = TrpDocument
    form_class = TrpDocumentForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpDocumentUpdate, self).dispatch(*args, **kwargs)


class TrpDocumentDelete(DeleteView):
    model = TrpDocument
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:trpdocument_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpDocumentDelete, self).dispatch(*args, **kwargs)


class TrpPageListView(GenericListView):

    model = TrpPage
    filter_class = TrpPageListFilter
    formhelper_class = TrpPageFilterFormHelper
    table_class = TrpPageTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = True


class TrpPageDetailView(BaseDetailView):

    model = TrpPage
    template_name = 'browsing/generic_detail.html'


class TrpPageCreate(BaseCreateView):

    model = TrpPage
    form_class = TrpPageForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpPageCreate, self).dispatch(*args, **kwargs)


class TrpPageUpdate(BaseUpdateView):

    model = TrpPage
    form_class = TrpPageForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpPageUpdate, self).dispatch(*args, **kwargs)


class TrpPageDelete(DeleteView):
    model = TrpPage
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:trppage_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpPageDelete, self).dispatch(*args, **kwargs)


class TrpTranscriptListView(GenericListView):

    model = TrpTranscript
    filter_class = TrpTranscriptListFilter
    formhelper_class = TrpTranscriptFilterFormHelper
    table_class = TrpTranscriptTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = True


class TrpTranscriptDetailView(BaseDetailView):

    model = TrpTranscript
    template_name = 'browsing/generic_detail.html'


class TrpTranscriptCreate(BaseCreateView):

    model = TrpTranscript
    form_class = TrpTranscriptForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpTranscriptCreate, self).dispatch(*args, **kwargs)


class TrpTranscriptUpdate(BaseUpdateView):

    model = TrpTranscript
    form_class = TrpTranscriptForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpTranscriptUpdate, self).dispatch(*args, **kwargs)


class TrpTranscriptDelete(DeleteView):
    model = TrpTranscript
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:trptranscript_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TrpTranscriptDelete, self).dispatch(*args, **kwargs)


